//
// FILE: GarageDoor.ino
// AUTHOR: Barre
// VERSION: 0.1.3
// PURPOSE: closing garage door after 15 min open, when pushed button reset timer
// START PROJECT DATE: 2020-20-09
// VERSION DATE: 2020-05-10
// URL: https://github.com/barremans/GarageDoorAlarm
//

#include <StopWatch.h>

StopWatch MySW;

int alarmTime = 10000;

//buzzer
int buzzer = 30 ;

//LEDS
int ledOpen = 4; // LED red => door open
int ledClose = 5; // LED green => door open
int ledOperate = 6; // LED blue => door in operate


//hall sensors
int hallSensorOpen = 8;  //door open
int hallSensorClose = 9;  //door open


//global variables
int stateOpen = 0; 
int stateClose = 0;


// Rotary Encoder Inputs
#define CLK 48
#define DT  50
#define SW  52

int counter = 0;
int currentStateCLK;
int lastStateCLK;
String currentDir ="";
unsigned long lastButtonPress = 0;
int Lastcounter ;


////////////// END VARIABLES ///////////////////

void setup()
{
  Serial.begin(115200);
  Serial.print("Version: ");
  Serial.println(STOPWATCH_LIB_VERSION);

//  SWarray[0].start();
  //LEDS      
  pinMode(ledOpen, OUTPUT);  
  pinMode(ledClose, OUTPUT);  

//Hall sensors      
  pinMode(hallSensorOpen, INPUT);  
   pinMode(hallSensorClose, INPUT); 

//BUZZER
  pinMode (buzzer, OUTPUT) ;
  digitalWrite(buzzer, HIGH);  // sets the digital pin 30 off

// Set encoder pins as inputs
  pinMode(CLK,INPUT);
  pinMode(DT,INPUT);
  pinMode(SW, INPUT_PULLUP);

// Read the initial state of CLK
  lastStateCLK = digitalRead(CLK);
  

}

///////////// END SETUP ///////////////////////////////

void loop()
{

  alarmTime = 15000; //15sec


//LED  door open RED = HIGH, closed GREEN = HIGH
//open
 stateOpen = digitalRead(hallSensorOpen);
  if (stateOpen == HIGH) {        
    digitalWrite(ledOpen, HIGH);  
  } 
  else {
    digitalWrite(ledOpen, LOW); 
  }


 
//closed
 stateClose = digitalRead(hallSensorClose);
  if (stateClose == HIGH) {        
    digitalWrite(ledClose, HIGH);  
  } 
  else {
    digitalWrite(ledClose, LOW); 
  }



  if (stateClose == LOW && stateOpen == LOW){        
    digitalWrite(ledOperate, HIGH); 
  } 
  else {
    digitalWrite(ledOperate, LOW); 
  }


 //////// END LED CONFIG ///////////////

 

/// time opening or closing max 30sec  ///////////
////////  open door or opening ////////

 if (stateOpen == HIGH && stateClose == LOW ){
 MySW.start(); 
  for(int i=0; i<5; i++)
  {
    delay(10);
 }

if (MySW.elapsed()>alarmTime)
{
   alarmBuzzer();
}

 }
  else
  {
      MySW.stop();
      MySW.reset();
  
  }
 

///// START ROTARY   ////////
   Lastcounter = counter;
  // Read the current state of CLK
  currentStateCLK = digitalRead(CLK);

  // If last and current state of CLK are different, then pulse occurred
  // React to only 1 state change to avoid double count
  if (currentStateCLK != lastStateCLK  && currentStateCLK == 1){

    // If the DT state is different than the CLK state then
    // the encoder is rotating CCW so decrement
    if (digitalRead(DT) != currentStateCLK) {
      counter --;
      currentDir ="opening";
   
    } else {
      // Encoder is rotating CW so increment
      counter ++;
      currentDir ="closing";

    }

    Serial.print("Direction: ");
    Serial.print(currentDir);
    Serial.print(" | Counter: ");
    Serial.println(counter);
    Serial.print(" | lastcounter: ");
    Serial.println(Lastcounter);
  }

  // Remember last CLK state
  lastStateCLK = currentStateCLK;

  // Read the button state
  int btnState = digitalRead(SW);
/*
  //If we detect LOW signal, button is pressed
  if (btnState == LOW) {
    //if 50ms have passed since last LOW pulse, it means that the
    //button has been pressed, released and pressed again
    if (millis() - lastButtonPress > 50) {
      Serial.println("Button pressed!");
    }

    // Remember last button press event
    lastButtonPress = millis();
  }
  */
  ////////// END ROTARY //////////////////////



}

void alarmBuzzer (){
         digitalWrite (buzzer, LOW) ; //send tone
      delay (150) ;
      digitalWrite (buzzer, HIGH) ; //no tone
            delay (150) ;
      digitalWrite (buzzer, LOW) ; //no tone
      delay (150) ;
        digitalWrite (buzzer, HIGH) ; //no tone
      
}
// -- END OF FILE --
